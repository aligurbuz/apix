#!/usr/bin/env php
<?php
/**
 * Cli composer vendor autoload.
 * For libraries that specify autoload information, Composer generates a vendor/autoload.php file.
 * You can simply include this file and start using the classes that those libraries provide without any extra work
 * system main skeleton
 * return autoload file
 */
require_once './vendor/autoload.php';

/**
 * Root main path.
 * dirname — Returns a parent directory's path
 * Given a string containing the path of a file or directory,
 * this function will return the parent directory's path that is levels up from the current directory.
 * return type string
 */
$root=dirname(__FILE__);
define('root',$root);

/**
 * Spl auto load register.
 * spl_autoload_register — Register given function as __autoload() implementation
 * Register a function with the spl provided __autoload queue. If the queue is not yet activated it will be activated.
 * If your code has an existing __autoload() function then this function must be explicitly registered on the __autoload queue.
 * This is because spl_autoload_register() will effectively replace the engine cache for the __autoload() function
 * by either spl_autoload() or spl_autoload_call()
 * return autoload
 */
spl_autoload_register(function($class) {
    $class='./'.$class.'.php';
    $class=str_replace("\\","/",$class);
    require($class);

});



/**
 * System cli command main file
 * this snippet calls really command file for system
 * return class method
 */
if(file_exists('./lib/bin/commands/'.$argv[1].'.php')){
    $commandFile=require("./lib/bin/commands/".$argv[1].".php");

    $commandFile=new $argv[1]();

    $list=[];
    foreach ($argv as $key=>$value){
        if($key>2){

            if(preg_match('@:@is',$value))
            {
                $value=explode(":",$value);
                $list[$value[0]]=$value[1];
            }
            else
            {
                $list[$value]=$value;
            }
        }
    }

    $method=$argv[2];
    echo $commandFile->$method($list);
    echo '
';
}
else{

    /**
     * System cli custom command main file
     * return class method
     */
    if(environment()=="local"){
        //get connection
        $consoleCommandApplication=new \lib\bin\custom();
        echo $consoleCommandApplication->execute($argv);
        echo '
';
    }
    else {
        echo 'Console command except local would not work';
        echo '
        ================================';
    }


}


