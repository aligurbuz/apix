#!/usr/bin/env php
<?php

/**
 * Root main path.
 * dirname — Returns a parent directory's path
 * Given a string containing the path of a file or directory,
 * this function will return the parent directory's path that is levels up from the current directory.
 * return type string
 */
$root=dirname(__FILE__);
define('root',$root);
define('src','src/app');

/**
 * Cli composer vendor autoload.
 * For libraries that specify autoload information, Composer generates a vendor/autoload.php file.
 * You can simply include this file and start using the classes that those libraries provide without any extra work
 * system main skeleton
 * return autoload file
 */
require_once './vendor/autoload.php';

/**
 * Spl auto load register.
 * spl_autoload_register — Register given function as __autoload() implementation
 * Register a function with the spl provided __autoload queue. If the queue is not yet activated it will be activated.
 * If your code has an existing __autoload() function then this function must be explicitly registered on the __autoload queue.
 * This is because spl_autoload_register() will effectively replace the engine cache for the __autoload() function
 * by either spl_autoload() or spl_autoload_call()
 * return autoload
 */
echo (new \Apix\autoloadRegister())->register();

/**
 * set config
 */
require (\Apix\staticPathModel::$apixClassAliasPath);
\Apix\environment::config();
use Apix\StaticPathModel as staticPath;
use Apix\Utils;


/**
 * System cli command main file
 * this snippet calls really command file for system
 * return class method
 */
if(file_exists(staticPath::$binCommandsPath.''.$argv[1].''.utils::$extension)){

    /**
     * System cli command for spl function
     * this snippet calls really spl command for system
     * return spl method
     */
    $commandNamespaceSpl=staticPath::$binCommandsNameSpace.''.$argv[1];
    $commandFile=new $commandNamespaceSpl();

    /**
     * System cli main class file
     * this snippet calls really main class file for system
     * return class method
     */
    $method=$argv[2];
    echo $commandFile->$method(utils::getArgForConsoleParameters($argv)).''.PHP_EOL;
}
else{

    /**
     * System cli custom command main file
     * return class method
     * get base properties
     */
    echo utils::getBaseConsoleStaticProperties($argv);


}


